/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.1.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.cmpe202.hotels.api;

import com.cmpe202.hotels.model.HotelInfo;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;

import java.util.List;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-03-22T20:24:30.862902-07:00[America/Los_Angeles]")
@Api(value = "hotels", description = "the hotels API")
public interface HotelsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /hotels : create a new hotel in the backend
     * create a new hotel in the backend
     *
     * @param hotelInfo HotelInfo is returned. (optional)
     * @return hote is created (status code 201)
     *         or invalid input, object invalid (status code 400)
     *         or an existing item already exists (status code 409)
     */
    @ApiOperation(value = "create a new hotel in the backend", nickname = "postHotel", notes = "create a new hotel in the backend", response = HotelInfo.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "hote is created", response = HotelInfo.class),
        @ApiResponse(code = 400, message = "invalid input, object invalid"),
        @ApiResponse(code = 409, message = "an existing item already exists") })
    @PostMapping(
        value = "/hotels",
        produces = "application/json",
        consumes = "application/json"
    )
    default ResponseEntity<HotelInfo> postHotel(@ApiParam(value = "HotelInfo is returned."  )   @RequestBody(required = false) HotelInfo hotelInfo) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"zipcode\" : \"zipcode\", \"rooms\" : [ { \"roomId\" : \"d290f1ee-6c54-4b01-90e6-d701748f0851\", \"roomPhotoUrl\" : \"roomPhotoUrl\", \"roomFeatures\" : [ \"roomFeatures\", \"roomFeatures\" ], \"basePrice\" : 0.8008281904610115 }, { \"roomId\" : \"d290f1ee-6c54-4b01-90e6-d701748f0851\", \"roomPhotoUrl\" : \"roomPhotoUrl\", \"roomFeatures\" : [ \"roomFeatures\", \"roomFeatures\" ], \"basePrice\" : 0.8008281904610115 } ], \"address\" : \"address\", \"name\" : \"Any acceptable name of the hotel\", \"hotelId\" : \"d290f1ee-6c54-4b01-90e6-d701748f0851\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /hotels/{zip} : Fetches the nearby hotels for that zipcode
     * Fetches the nearby hotels for that zipcode
     *
     * @param zip Pass zip code to fetch list of hotels. (required)
     * @return Returns list of hotels. (status code 200)
     *         or bad input parameter (status code 400)
     */
    @ApiOperation(value = "Fetches the nearby hotels for that zipcode", nickname = "searchHotels", notes = "Fetches the nearby hotels for that zipcode", response = HotelInfo.class, responseContainer = "List", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Returns list of hotels.", response = HotelInfo.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "bad input parameter") })
    @GetMapping(
        value = "/hotels/{zip}",
        produces = "application/json"
    )
    default ResponseEntity<List<HotelInfo>> searchHotels(@ApiParam(value = "Pass zip code to fetch list of hotels.",required=true) @PathVariable("zip") String zip) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"zipcode\" : \"zipcode\", \"rooms\" : [ { \"roomId\" : \"d290f1ee-6c54-4b01-90e6-d701748f0851\", \"roomPhotoUrl\" : \"roomPhotoUrl\", \"roomFeatures\" : [ \"roomFeatures\", \"roomFeatures\" ], \"basePrice\" : 0.8008281904610115 }, { \"roomId\" : \"d290f1ee-6c54-4b01-90e6-d701748f0851\", \"roomPhotoUrl\" : \"roomPhotoUrl\", \"roomFeatures\" : [ \"roomFeatures\", \"roomFeatures\" ], \"basePrice\" : 0.8008281904610115 } ], \"address\" : \"address\", \"name\" : \"Any acceptable name of the hotel\", \"hotelId\" : \"d290f1ee-6c54-4b01-90e6-d701748f0851\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
